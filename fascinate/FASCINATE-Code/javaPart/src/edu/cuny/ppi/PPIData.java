package edu.cuny.ppi;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.annotation.Documented;
import java.util.HashMap;

public class PPIData {
	
//	private static HashMap<String, Integer> nameMap = new HashMap<String,Integer>();
	private static Integer nNodes = 0;
//	private static BufferedWriter bwMap;
	
	private static void process(String fileName) throws IOException{
		/** this function takes the raw layer network as input and output 2 files; 
		 * The first '-Out' file is the corresponding indexed network;
		 * The second '-Map' file is the Name*/
		BufferedReader br = new BufferedReader(new FileReader(new File(fileName)));
		String outFile = fileName+"Out";
		String mapFile = fileName+"Map";
		BufferedWriter bW = new BufferedWriter(new FileWriter(new File(outFile)));
		BufferedWriter bwMap = new BufferedWriter(new FileWriter(new File(mapFile)));
		HashMap<String, Integer> nameMap = new HashMap<String, Integer>();
		String line;
		while((line = br.readLine())!=null){
			String[] tokens = line.split("\t");
			Integer node1,node2;
			node1 = getNumber(tokens[0],nameMap,bwMap);
			node2 = getNumber(tokens[1],nameMap,bwMap);
			String output = String.valueOf(node1)+"\t"+String.valueOf(node2);
			if(tokens.length == 3){
				output = output +"\t"+tokens[2];
			}
			bW.write(output);
			bW.newLine();
		}
		br.close();
		bW.close();
		bwMap.close();
		nNodes = 0;
	}
	
	private static HashMap<Integer, String> buildMap(String fileMap) throws IOException{
		HashMap<Integer, String> indexNameMap = new HashMap<Integer, String>();
		BufferedReader bReader = new BufferedReader(new FileReader(new File(fileMap)));
		String line;
		while((line=bReader.readLine())!=null){
			String[] tokens = line.split("\t");
			indexNameMap.put(Integer.valueOf(tokens[1]), tokens[0]);
		}
		bReader.close();
		return indexNameMap;
	}
	
	private static void reconstructEdge(String edgeFile,String mapFile) throws IOException{
		HashMap<Integer, String> map1 = buildMap(mapFile);
		String edgeResult = edgeFile+"Result";
		BufferedReader bReader = new BufferedReader(new FileReader(new File(edgeFile)));
		BufferedWriter bWriter = new BufferedWriter(new FileWriter(new File(edgeResult)));
		String line;
		//title included, pass without process
		line = bReader.readLine();
		bWriter.write(line);
		bWriter.newLine();
		while((line=bReader.readLine())!=null){
			String[] tokens = line.split("\t");
			String node1 = map1.get(Integer.valueOf(tokens[0]));
			String node2 = map1.get(Integer.valueOf(tokens[1]));
			String outLine = node1+"\t"+node2;
			bWriter.write(outLine);
			if(tokens.length > 2){
				for(int i = 2;i < tokens.length;i++){
					bWriter.write("\t"+tokens[i]);
				}
			}
			bWriter.newLine();
		}
		bReader.close();
		bWriter.close();
		
	}

	
	private static Integer getNumber(String node, HashMap<String, Integer> nameMap, BufferedWriter bwMap) throws IOException {
		if(nameMap.containsKey(node)){
			return nameMap.get(node);
		}
		else{
			nNodes = nNodes+1;
			nameMap.put(node, nNodes);
			String line = node+"\t"+String.valueOf(nNodes);
			bwMap.write(line);
			bwMap.newLine();
			return nNodes;
		}
		
	}
	
	private static HashMap<String, Integer> getMap(String fileName) throws IOException{
		BufferedReader bReader = new BufferedReader(new FileReader(new File(fileName)));
		HashMap<String, Integer> tempMap = new HashMap<String, Integer>();
		String line;
		while ((line = bReader.readLine())!=null) {
			String[] tokens = line.split("\t");
			tempMap.put(tokens[0], Integer.valueOf(tokens[1]));
		}
		return tempMap;
	}
	
	private static void generateDependency(String layerMap1,String layerMap2,String depFile) throws IOException{
		/**Generate indexed dependency file according to the map file generated by method 'process' 
		 * Layer maps are given in 'layerMap1' and 'layerMap2'; Corresponding raw dependency file is give in 'depFile'
		 * The output file '-dep' is the indexed dependency file of the two given layers*/
		HashMap<String, Integer> layer1Map = new HashMap<String,Integer>();
		HashMap<String, Integer> layer2Map = new HashMap<String,Integer>();
		BufferedWriter bWriter = new BufferedWriter(new FileWriter(new File(depFile+"dep")));
		layer1Map = getMap(layerMap1);
		layer2Map = getMap(layerMap2);
		BufferedReader bReader = new BufferedReader(new FileReader(new File(depFile)));
		String lineString;
		while((lineString=bReader.readLine())!=null){
			String[] tokensStrings = lineString.split("\t");
			if(layer1Map.containsKey(tokensStrings[0])&& layer2Map.containsKey(tokensStrings[1])){
				bWriter.write(layer1Map.get(tokensStrings[0])+"\t"+layer2Map.get(tokensStrings[1]));
				bWriter.newLine();
			}
		}
		bReader.close();
		bWriter.close();
		
		
	}

	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {
		
		//construct Name-Index map
		String rawlayer1 = "E:\\project\\bioProj\\benchmark\\chem_chem_tg_sim0.5.tsv";
		String rawlayer2 = "E:\\project\\bioProj\\benchmark\\gene_gene_ppi.tsv";
		String rawlayer3 = "E:\\project\\bioProj\\benchmark\\omim_omim_sim0.5.tsv";
		process(rawlayer1);
		process(rawlayer2);
		process(rawlayer3);
		
		//construct dependency file
		String layer1 = "E:\\project\\bioProj\\benchmark\\chem_chem_tg_sim0.5.tsvMap";
		String layer2 = "E:\\project\\bioProj\\benchmark\\gene_gene_ppi.tsvMap";
		String layer3 = "E:\\project\\bioProj\\benchmark\\omim_omim_sim0.5.tsvMap";
		String depFile1 = "E:\\project\\bioProj\\benchmark\\chem_gene.tsv";
		String depFile2 = "E:\\project\\bioProj\\benchmark\\chem_omim.tsv";
		String depFile3 = "E:\\project\\bioProj\\benchmark\\gene_omim.tsv";
		generateDependency(layer1, layer2, depFile1);
		generateDependency(layer1, layer3, depFile2);
		generateDependency(layer2, layer3, depFile3);
		
		
		//dependency reconstruct
		String depFile = "E:\\project\\bioProj\\benchmark\\chem_gene.tsvdep";
		String mapLayer1 = "E:\\project\\bioProj\\benchmark\\chem_chem_tg_sim0.5.tsvMap";
		String mapLayer2 = "E:\\project\\bioProj\\benchmark\\gene_gene_ppi.tsvMap";
		reconstructDep(depFile,mapLayer1,mapLayer2);
		

	}

	private static void reconstructDep(String depFile, String mapLayer1,
			String mapLayer2) throws IOException {
		/**Reconstruct the indexed dependency file into corresponding entity dependency file
		 * The dependency file is given in 'depFile', the index map of the two layers are given in 'mapLayer1' and 'mapLayer2'
		 * The output '-Result' file is gives the corresponding entity dependency file*/
		HashMap<Integer, String> map1 = buildMap(mapLayer1);
		HashMap<Integer, String> map2 = buildMap(mapLayer2);
		String depResult = depFile+"Result";
		BufferedReader bReader = new BufferedReader(new FileReader(new File(depFile)));
		BufferedWriter bWriter = new BufferedWriter(new FileWriter(new File(depResult)));
		String line;
		
		while((line=bReader.readLine())!=null){
			String[] tokens = line.split("\t");
			String node1 = map1.get(Integer.valueOf(tokens[0]));
			String node2 = map2.get(Integer.valueOf(tokens[1]));
			String outLine = node1+"\t"+node2;
			bWriter.write(outLine);
			if(tokens.length > 2){
				for(int i = 2;i < tokens.length;i++){
					bWriter.write("\t"+tokens[i]);
				}
			}
			bWriter.newLine();
		}
		bReader.close();
		bWriter.close();
	}

}
